{
	"info": {
		"_postman_id": "48447322-65291f98-5ef1-458e-a1a3-2e70db53f2ab",
		"name": "Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Usercreation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9befd19-84af-4ac2-8e8c-e24a2024f4ad",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.test(\"Response time is less than 200ms\", function () {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "48447322-59e6dd97-5c9d-46dc-8936-5d9834ff80db",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://web.facebook.com/{{endpoint}}",
					"protocol": "https",
					"host": [
						"web",
						"facebook",
						"com"
					],
					"path": [
						"{{endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registerusertest",
			"id": "48447322-ab3aae34-a3d9-40b9-b851-e8ac6d22ffdb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register/qa",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register",
						"qa"
					]
				}
			},
			"response": []
		},
		{
			"name": "Commontests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4f6269d7-1088-4c7f-a768-d83e62b87ab2",
						"exec": [
							"https://web.facebook.com/{{endpoint}}\r",
							"\r",
							"{\r",
							"    \"email\": \"{{email}}\",\r",
							"    \"password\": \"{{password}}\"\r",
							"}\r",
							"\r",
							"{\r",
							"  \"email\": \"peter@klaven\",\r",
							"  \"password\": \"peter1\"\r",
							"}\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 GET Requests\r",
							"**************************************************************/\r",
							"\r",
							"// 1) List users\r",
							"// Request: GET https://reqres.in/api/users?page=2\r",
							"// Example Response:\r",
							"const listUsersResponse = {\r",
							"    page: 2,\r",
							"    per_page: 6,\r",
							"    total: 12,\r",
							"    data: [\r",
							"        { id: 7, email: \"michael.lawson@reqres.in\", first_name: \"Michael\", last_name: \"Lawson\" },\r",
							"        { id: 8, email: \"lindsay.ferguson@reqres.in\", first_name: \"Lindsay\", last_name: \"Ferguson\" }\r",
							"    ]\r",
							"};\r",
							"// Tests:\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Response has data array\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.data).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"\r",
							"// 2) Single user\r",
							"// Request: GET https://reqres.in/api/users/2\r",
							"// Example Response:\r",
							"const singleUserResponse = {\r",
							"    data: {\r",
							"        id: 2,\r",
							"        email: \"janet.weaver@reqres.in\",\r",
							"        first_name: \"Janet\",\r",
							"        last_name: \"Weaver\",\r",
							"        avatar: \"https://reqres.in/img/faces/2-image.jpg\"\r",
							"    }\r",
							"};\r",
							"// Tests:\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"User ID is 2\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.data.id).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							"// 3) Single user not found\r",
							"// Request: GET https://reqres.in/api/users/23\r",
							"// Example Response:\r",
							"const userNotFoundResponse = {};\r",
							"// Tests:\r",
							"pm.test(\"Status code is 404\", () => pm.response.to.have.status(404));\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 POST Requests\r",
							"**************************************************************/\r",
							"\r",
							"// 4) Create user\r",
							"// Request: POST https://reqres.in/api/users\r",
							"// Body:\r",
							"const createUserRequest = { name: \"morpheus\", job: \"leader\" };\r",
							"// Example Response:\r",
							"const createUserResponse = {\r",
							"    name: \"morpheus\",\r",
							"    job: \"leader\",\r",
							"    id: \"123\",\r",
							"    createdAt: \"2025-09-16T00:00:00.000Z\"\r",
							"};\r",
							"// Tests:\r",
							"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
							"pm.test(\"Response contains name\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.name).to.eql(\"morpheus\");\r",
							"});\r",
							"pm.test(\"Response has id\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"\r",
							"// 5) Login success\r",
							"// Request: POST https://reqres.in/api/login\r",
							"// Body:\r",
							"const loginRequest = { email: \"eve.holt@reqres.in\", password: \"cityslicka\" };\r",
							"// Example Response:\r",
							"const loginResponse = { token: \"QpwL5tke4Pnpja7X4\" };\r",
							"// Tests:\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Token is present\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"token\");\r",
							"});\r",
							"\r",
							"\r",
							"// 6) Login failure\r",
							"// Request: POST https://reqres.in/api/login\r",
							"// Body:\r",
							"const loginFailRequest = { email: \"peter@klaven\" };\r",
							"// Example Response:\r",
							"const loginFailResponse = { error: \"Missing password\" };\r",
							"// Tests:\r",
							"pm.test(\"Status code is 400\", () => pm.response.to.have.status(400));\r",
							"pm.test(\"Error is 'Missing password'\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.error).to.eql(\"Missing password\");\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 PUT / PATCH Requests\r",
							"**************************************************************/\r",
							"\r",
							"// 7) Update user (PUT)\r",
							"// Request: PUT https://reqres.in/api/users/2\r",
							"// Body:\r",
							"const putRequest = { name: \"morpheus\", job: \"zion resident\" };\r",
							"// Example Response:\r",
							"const putResponse = {\r",
							"    name: \"morpheus\",\r",
							"    job: \"zion resident\",\r",
							"    updatedAt: \"2025-09-16T00:00:00.000Z\"\r",
							"};\r",
							"// Tests:\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Updated job is correct\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.job).to.eql(\"zion resident\");\r",
							"});\r",
							"\r",
							"\r",
							"// 8) Partial update user (PATCH)\r",
							"// Request: PATCH https://reqres.in/api/users/2\r",
							"// Body:\r",
							"const patchRequest = { job: \"zion resident\" };\r",
							"// Example Response:\r",
							"const patchResponse = {\r",
							"    job: \"zion resident\",\r",
							"    updatedAt: \"2025-09-16T00:00:00.000Z\"\r",
							"};\r",
							"// Tests:\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Partial update accepted\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.job).to.eql(\"zion resident\");\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 DELETE Requests\r",
							"**************************************************************/\r",
							"\r",
							"// 9) Delete user\r",
							"// Request: DELETE https://reqres.in/api/users/2\r",
							"// Example Response: (empty body, just 204 No Content)\r",
							"// Tests:\r",
							"pm.test(\"Status code is 204\", () => pm.response.to.have.status(204));\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 REGISTER Requests\r",
							"**************************************************************/\r",
							"\r",
							"// 10) Register success\r",
							"// Request: POST https://reqres.in/api/register\r",
							"// Body:\r",
							"const registerRequest = { email: \"eve.holt@reqres.in\", password: \"pistol\" };\r",
							"// Example Response:\r",
							"const registerResponse = { id: 4, token: \"QpwL5tke4Pnpja7X4\" };\r",
							"// Tests:\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"ID and token present\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"id\");\r",
							"    pm.expect(json).to.have.property(\"token\");\r",
							"});\r",
							"\r",
							"\r",
							"// 11) Register failure\r",
							"// Request: POST https://reqres.in/api/register\r",
							"// Body:\r",
							"const registerFailRequest = { email: \"sydney@fife\" };\r",
							"// Example Response:\r",
							"const registerFailResponse = { error: \"Missing password\" };\r",
							"// Tests:\r",
							"pm.test(\"Status code is 400\", () => pm.response.to.have.status(400));\r",
							"pm.test(\"Error message is 'Missing password'\", () => {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.error).to.eql(\"Missing password\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a5f5c2cc-e463-486d-9ca6-a315def3bec4",
						"exec": [
							"/**************************************************************\r",
							" 🟢 CATEGORY 1: STATUS CODE VALIDATION\r",
							"**************************************************************/\r",
							"\r",
							"// ✅ Check if response status is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ✅ Check if response status is in range 200–299\r",
							"pm.test(\"Status code is successful\", function () {\r",
							"    pm.expect(pm.response.code).to.be.within(200, 299);\r",
							"});\r",
							"\r",
							"// ✅ Check if response status is 400 (Bad Request)\r",
							"pm.test(\"Status code is 400 - Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// ✅ Check if response status is 401 (Unauthorized)\r",
							"pm.test(\"Status code is 401 - Unauthorized\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"// ✅ Check if response status is 500 (Internal Server Error)\r",
							"pm.test(\"Status code is 500 - Internal Server Error\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 CATEGORY 2: RESPONSE TIME VALIDATION\r",
							"**************************************************************/\r",
							"\r",
							"// ✅ Response time is less than 500ms\r",
							"pm.test(\"Response time < 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// ✅ Response time is less than 1s\r",
							"pm.test(\"Response time < 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// ✅ Response time is less than 2s\r",
							"pm.test(\"Response time < 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 CATEGORY 3: JSON BODY VALIDATION\r",
							"**************************************************************/\r",
							"\r",
							"// ✅ Parse JSON response\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// ✅ Check if response body has key \"id\"\r",
							"pm.test(\"Response has 'id' field\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"// ✅ Validate user id equals 2\r",
							"pm.test(\"User ID equals 2\", function () {\r",
							"    pm.expect(jsonData.data.id).to.eql(2);\r",
							"});\r",
							"\r",
							"// ✅ Validate user’s email\r",
							"pm.test(\"Email matches expected value\", function () {\r",
							"    pm.expect(jsonData.data.email).to.eql(\"janet.weaver@reqres.in\");\r",
							"});\r",
							"\r",
							"// ✅ Validate array has at least 1 record\r",
							"pm.test(\"User list contains records\", function () {\r",
							"    pm.expect(jsonData.data.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// ✅ Validate field is not null\r",
							"pm.test(\"User avatar is not null\", function () {\r",
							"    pm.expect(jsonData.data[0].avatar).to.not.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 CATEGORY 4: NEGATIVE TESTING & ERROR VALIDATION\r",
							"**************************************************************/\r",
							"\r",
							"// ✅ Check invalid login returns 400\r",
							"pm.test(\"Login fails with missing password\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// ✅ Check specific error message\r",
							"pm.test(\"Error message is 'Missing password'\", function () {\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"});\r",
							"\r",
							"// ✅ Check error field exists in response\r",
							"pm.test(\"Response contains 'error' field\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 CATEGORY 5: HEADERS VALIDATION\r",
							"**************************************************************/\r",
							"\r",
							"// ✅ Check if Content-Type is JSON\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// ✅ Check if Server header exists\r",
							"pm.test(\"Response contains 'Server' header\", function () {\r",
							"    pm.response.to.have.header(\"Server\");\r",
							"});\r",
							"\r",
							"// ✅ Check if Cache-Control header contains 'no-cache'\r",
							"pm.test(\"Cache-Control is no-cache\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache\");\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 CATEGORY 6: VARIABLES & DATA DRIVEN TESTING\r",
							"**************************************************************/\r",
							"\r",
							"// ✅ Save auth token into environment variable\r",
							"pm.environment.set(\"authToken\", jsonData.token);\r",
							"\r",
							"// ✅ Save user id into collection variable\r",
							"pm.collectionVariables.set(\"userId\", jsonData.id);\r",
							"\r",
							"// ✅ Use stored token in Authorization header (example usage)\r",
							"pm.request.headers.add({\r",
							"    key: \"Authorization\",\r",
							"    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 CATEGORY 7: SCHEMA VALIDATION (ADVANCED)\r",
							"**************************************************************/\r",
							"\r",
							"// ✅ Validate response against JSON schema\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\"type\": \"number\"},\r",
							"        \"email\": {\"type\": \"string\"},\r",
							"        \"first_name\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"id\", \"email\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"/**************************************************************\r",
							" 🟢 CATEGORY 8: CHAINED REQUESTS\r",
							"**************************************************************/\r",
							"\r",
							"// ✅ Extract user ID from response and store\r",
							"pm.environment.set(\"userId\", jsonData.data.id);\r",
							"\r",
							"// ✅ Extract token and use in subsequent request\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "48447322-4d1d79fe-eca5-471d-ba35-593242ab46de",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "endpoint",
			"value": "",
			"type": "default"
		},
		{
			"key": "email",
			"value": "",
			"type": "default"
		},
		{
			"key": "password",
			"value": "",
			"type": "default"
		}
	]
}